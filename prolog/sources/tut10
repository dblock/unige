
<HTML>

<HEAD>

<TITLE>Prolog Tutorial</TITLE>

</HEAD>


<H2>Prolog Tutorial</H2><P>

<h3>Tutor: <A HREF="http://www.arch.su.edu.au/~jose/index.html">Jos&eacute Damski</A></h3><P>

<H2>Recursion</H2><P>

One of the most interesting aspect about Prolog is its 
capacity to define recursive
information. Recursion occurs when something is defined over itself with 
a terminal condition. The classical example is the difinition of the factorial,
which  is:
<UL>
<LI>Factorial of the number N is the product of N times the
fatorial of N-1, for any positive integer number.
<LI> The factorial of zero is 1.
</UL>

This very simple, yet powerful and complete defition of 
factorial, can be easily expressed in Prolog as:
<PRE>
   factorial(0,1).
   factorial(N,X):- M is N - 1, 
                    factorial(M,Y), 
                    X is N * Y.
</pre>

In this case the fact must come first than the rule, because the 
Prolog will try to solve the factorial(M,Y) inside the rule with the
first occurance of this predicate in the program, and where the
process finish (the number is counted down to zero). Otherwise
the program falls into a infinite loop.<P>

Recursion is very usefull, simple and generates  compact 
programs, but it goes out of control easily. So be careful when
running programs with recursion.
<P>

Recursion is often used in operations over data structure also. In Prolog
the data can be a atom (single value) or a list (multiple value). A list
is set of elements, which can be numbers, letters, strings, and also
lists (YES! It is possible to have list of lists.).

A list is always written between [] and the elements are separated by
commas. Examples of simple lists are:<P>
<LU>
<LI> [room, kitchen, laundry, hall]
<LI> [123, 12, 45]
<LI> [a, b, c, d, e, f, g,h]
</LU>
<P>
Since a list is a set of elements, there are some basic operations such
as intersection, difference, union, etc wich we can implement in Prolog.
For instance, the predicate member1(X,L) is true if the element X is an element
of the list L. This funtions is implemented in Prolog as:<P>
<LU>
<LI> member1(X,[X|_]).
<LI> member1(X, [_|L]) :- member1(X,L).
</LU>
<P>
The operator "|" divides a list into the first element 
of the list ("head" 
of the list) and the
list of the remaining elements. In the first line above the predicate
member1(X,[X|_]) is true if the element X is the first element of the list.
(the undescore "_" means we do not care what is in this variable).
If it is not true, then the second line removes the first element of
the list and execute the member again with the initial list less the
first element.<P>
<h3>Exercise</h3><P>
Write the member definition in a file and test it with the following
queries:<P>
<LU>
<LI> member1(a,[b,c,a,d]).
<LI> member1(a,[b,c,f,d]).
<LI> member1(20, [15,16, 17, 18, 19, 20]).
<LI> member1(mike, [ana, paul, mary, tom]).
</LU>
<P>
In order to follow what Prolog is doing, see the trace of the execution.
To start the trace type<P>
<PRE>
   trace.
</PRE><P>
before start the query itself. Keep typing &ltenter&gt to execute
the next step. Try some of the above queries with trace on and study
the result.
<P>

Other useful operation is the subset. The predicate subset1(X,Y) is
true if all elements in the list X are also elements of the list Y.
In order to solve this problem we just have to test, for every
element of X if it is a member (as we defined above) of the 
list Y. The program stops if there is no more elements to test 
in the list X and fails otherwise. The program is:
<PRE>
   subset1([],_).
   subset1([X|L],Y) :- member1(X,Y), subset1(L,Y).
</pre>
where [] means empty list.<P>
Put this predicate in the same program where you defined the
predicate <b>member</B> and execute the following queries:
<UL>
<LI> subset1([a,b,c],[x,a,f,b,g,h,c]).
<LI> subset1([1,2,100],[100,2,1,3]).
<LI> subset1([1,2,100],[100,2]).
</UL>

Execute these queries again with trace on. Also create at least more 5
new queries similar to these.


<P>
<P>
<HR>

If you have any comments regarding to this tutorial, please 
<A HREF="mailto:jose@arch.su.edu.au">email me</A>







